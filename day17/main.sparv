fun get_input() {
    var n = read_file("day17/in") ->
        fun(s) split(s, "\r\n");
    return {
        A: split(n[0], "Register A: ")[0]->parse,
        B: split(n[1], "Register B: ")[0]->parse,
        C: split(n[2], "Register C: ")[0]->parse,
        Program: split(split(n[3], "Program: ")[0], ","),
    };
}
fun trunc(n) {
    var split = split(n + "", ".");
    if len(split) == 2 {
        return split[0]->parse;
    }
    return n;
}

fun bst(regs, combo) regs.B = combo % 8
fun bxl(regs, literal) regs.B = xor(regs.B, literal)
fun out(regs, combo) regs.output += [combo%8]
fun bxc(regs, depr) regs.B = xor(regs.B, regs.C)

fun jnz(regs, literal) {
    if regs.A != 0 {
        regs.p = literal - 2;
    }
}

fun dv(regs, combo) {
    var numerator = regs.A;
    var denominator = 1;
    loop combo {
        denominator = denominator * 2;
    }
    return trunc(numerator / denominator);
}

fun adv(regs, combo) regs.A = dv(regs, combo)
fun bdv(regs, combo) regs.B = dv(regs, combo)
fun cdv(regs, combo) regs.C = dv(regs, combo)


fun get_combo(regs, combo) {
    return match combo {
        "0" | 0,
        "1" | 1,
        "2" | 2,
        "3" | 3,
        "4" | regs.A,
        "5" | regs.B,
        "6" | regs.C,
        "7" | nil,
    };
}


fun run(a, b, c, prog) {
    var regs = {
        A: a,
        B: b,
        C: c,
        p: 0,
        output: [],
    };
    while regs.p < len(prog) {
        var combo = get_combo(regs, prog[regs.p+1]);
        var literal = prog[regs.p+1]->parse;
        match prog[regs.p] {
            "0" | adv(regs, combo),
            "1" | bxl(regs, literal),
            "2" | bst(regs, combo),
            "3" | jnz(regs, literal),
            "4" | bxc(regs, nil),
            "5" | out(regs, combo),
            "6" | bdv(regs, combo),
            "7" | cdv(regs, combo),
        };
        regs.p += 2;
    }
    return regs.output;
}

fun solve_p2(a, n, input) {
    for i in 0:8 {
        var res = run(a+i, 0, 0, input.Program);
        if res[0]+"" == input.Program[n] {
            if n == 0 {
                return (a+i);
            } else {
                var ans = solve_p2((a+i)*8, n-1, input);
                if ans { return ans; }
            }
        }
    }
}

fun print_p1(ans) {
    var delim = "";
    var out = "";
    for a in ans {
        out += delim + a;
        delim = ",";
    }
    print("p1: " + out);
}

var input = get_input();

run(input.A, input.B, input.C, input.Program)->print_p1;

var n = len(input.Program)-1;
solve_p2(0, n, input)->fun(ans) print("p2: " + ans);




