fun quicksort(list, lo, hi) {
    if lo >= hi or lo < 0 {
        return nil;
    }

    var p = partition(list, lo, hi);
    quicksort(list, lo, p - 1);
    quicksort(list, p + 1, hi);
}

fun partition(list, lo, hi) {
    var pivot = list[hi];
    var i = lo;

    for j in lo:hi {
        if list[j] <= pivot {
            var temp = list[i];
            list[i] = list[j];
            list[j] = temp;
            i += 1;
        }
    }
    var temp = list[i];
    list[i] = list[hi];
    list[hi] = temp;
    return i;
}



fun sort(list) {
    for i in 1:len(list) {

        var key = list[i];
        var j = i - 1;
        while j >= 0 and list[j] > key {
            list[j+1] = list[j];
            j = j - 1;
        }
        list[j+1] = key;
    }
    return list;
}


fun split_line(char) {
    return fun(string_to_split) {
        return split(string_to_split, char);
    };
}

var lines =read_file("day1/in")->split_line("\r\n");

var l1 = [];
var l2 = [];


for line in lines {
    var numbers = split(line, " ");
    l1 += [parse(numbers[0])];
    l2 += [parse(numbers[1])];
}

quicksort(l1, 0, len(l1)-1);
quicksort(l2, 0, len(l2)-1);

var p1 = 0;
var p2 = 0;

// p1
for i in 0:len(l1) {
    var t = l1[i] - l2[i];
    if t < 0 {
        t = t * -1;
    }
    p1 += t;
}

// p2
for i in l1 {
    var j = 0;
    var count = 0;
    while j != len(l2) {
        if i == l2[j] {
            count += 1;
        }
        j += 1;
    }
    p2 += count * i;

}

print("p1: " + p1);
print("p2: " + p2);
