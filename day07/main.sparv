
fun solve_lines(lines) {
    var p1 = 0;
    var p2 = 0;
    for line in lines {
        if solve_p1(line, 1, line[1][0]) {
            p1 += line[0];
        }
        if solve_p2(line, 1, line[1][0]) {
            p2 += line[0];
        }
    }
    print("p1: " + p1);
    print("p2: " + p2);
}

fun solve_p1(line, i, sum) {
    if sum > line[0] {
        return false;
    }
    if i == len(line[1]) {
        return sum == line[0];
    }
    return 
        solve_p1(line, i + 1, sum * line[1][i]) or 
        solve_p1(line, i + 1, sum + line[1][i]);
}

fun solve_p2(line, i, sum) {
    if sum > line[0] {
        return false;
    }
    if i == len(line[1]) {
        return sum == line[0];
    }


    
    return 
        solve_p2(line, i + 1, parse(sum + "" + line[1][i])) or
        solve_p2(line, i + 1, sum * line[1][i]) or
        solve_p2(line, i + 1, sum + line[1][i]);
}

fun parse_lines(lines) {
    var res = [];
    for line in lines {
        var s = split(line, ": ");
        var lhs = parse(s[0]);
        var rhs = [];
        for n in split(s[1], " ") {
            rhs += [parse(n)];
        }
        res += [[lhs, rhs]];
    }
    return res;
}





var start = time();

var input = read_file("day07/in") ->
    lines ->
    parse_lines ->
    solve_lines;

print("time: " + (time()-start) + "ms");
