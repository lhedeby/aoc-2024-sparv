fun map(f) {
    return fun(list) {
        for i in 0:len(list) {
            list[i] = f(list[i]);
        }
        return list;
    };
}

fun split_n_parse() {
    return fun(x) {
        return split(x, " ")->map(fun(y) parse(y));
    };
}

fun remove_from_line(old, to_remove) {
    var new = [];
    for i in 0:len(old) {
        if i != to_remove {
            new += [old[i]];
        }
    }
    return new;
}


fun test_line(line) {
    var remove = false;
    var increasing = true;
    if line[0] > line[1] {
        increasing = false;
    }
    
    
    for i in 1:len(line) {
        var diff = line[i] - line[i-1];
        if !increasing {
            diff = diff * -1;
        }
        
        if diff <= 0 or diff > 3 {
            return i;
        }
    }
    return nil;
}

var lines = read_file("day02/in") ->
    lines ->
    map(split_n_parse());

var p1 = 0;
var p2 = 0;

for line in lines {
    var safe = test_line(line);
    
    if safe {
        var t1 = remove_from_line(line, safe)->test_line;
        var t2 = remove_from_line(line, safe-1)->test_line;
        var t3 = remove_from_line(line, safe+1)->test_line;
        var t4 = remove_from_line(line, 0)->test_line;
        var t5 = remove_from_line(line, len(line)-1)->test_line;
        if !t1 or !t2 or !t3 or !t4 or !t5 {
            p2 += 1;
        }
    } else {
        p1 += 1;
        p2 += 1;
    }
}

print("p1: " + p1);
print("p2: " + p2);
