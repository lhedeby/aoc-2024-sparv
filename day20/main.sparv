var map = read_file("day20/in") ->
    fun(s) split(s, "\r\n");

fun pos(i, j) {
    return {
        i: i,
        j: j,
    };
}

//var curr = nil;
//for i in 0:len(map) {
//    var new_row = [];
//    for j in 0:len(map[i]) {
//        var c = map[i][j];
//    new_row += [map[i][j]];
//    if c == "S" {
//        curr = pos(i, j);
//        new_row[j] = ".";
//        }
//        if c == "E" {
//            new_row[j] = ".";
//        }
//    }
//    map[i] = new_row;
//}

fun remap(o) {
    for i in 0:len(o.map) {
        var new_row = [];
        for j in 0:len(o.map[i]) {
            var c = o.map[i][j];
            new_row += [o.map[i][j]];
            if c == "S" {
                new_row[j] = ".";
            }
            if c == "E" {
                new_row[j] = ".";
            }
        }
        map[i] = new_row;
    }
    return o;
}

fun find_start(o) {
    for i in 0:len(o.map) {
        for j in 0:len(o.map[i]) {
            if o.map[i][j] == "S" {
                o.start = {i: i, j: j};
                return o;
            }
        }
    }
}

fun to_list(o) {
    var current = o.start;
    var list = [];
    var p = 0;
    while current {
        map[current.i][current.j] = p;
        list += [{i: current.i, j: current.j, p: p}];
        p += 1;
        current = find_dot(current, map);
    }
    o.list = list;
    return o;
}

fun solve(text, cheat_distance) fun(o) {
    var count = 0;
    for a in 0:(len(o.list)-100) {
        var b = a+100;
        while b < len(o.list) {
            var distance = abs(o.list[a].i - o.list[b].i) + abs(o.list[a].j - o.list[b].j);
            if distance <= cheat_distance and (abs(o.list[a].p - o.list[b].p) - distance) >= 100 {
                count += 1;
            }
            if distance <= cheat_distance {
                b += 1;
            } else {
                b += distance - cheat_distance;
            }
        }
    }
    print(text + ": " + count);
    return o;
}


fun find_dot(p, map) match "." {
    map[p.i + 1][p.j] | pos(p.i+1, p.j),
    map[p.i - 1][p.j] | pos(p.i-1, p.j),
    map[p.i][p.j + 1] | pos(p.i, p.j+1),
    map[p.i][p.j - 1] | pos(p.i, p.j-1),
}

{map: map}          ->
    find_start      ->
    remap           ->
    to_list         ->
    solve("p1", 2)  ->
    solve("p2", 20)
;

