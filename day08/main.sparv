fun lines(s) split(s, "\r\n")


fun filter_oob(width, height) fun(list) {
    var res = [];
    for item in list {
        if 
        item[0] >= 0 and
        item[0] < height and
        item[1] >= 0 and
        item[1] < width {
            res += [item];
        }
    }
    return res;
}

fun remove_dupes(list) {
    var res = [];
    for item in list {
        var exists = false;
        for r in res {
            if r[0] == item[0] and r[1] == item[1] {
                exists = true;
            }
        }
        if !exists {
            res += [item];
        }
    }
    return res;
}

fun find_antennas(list) {
    var i = 0;
    var antennas = [];
    for line in list {
        var j = 0;
        for c in line {
            if c != "." {
                antennas += [[c, i, j]];
            }
            j += 1;
        }
        i += 1;
    }
    return antennas;
}

fun find_anti_nodes(antennas) {
    var res = [];
    for a1 in 0:(len(antennas) - 1) {
        for a2 in (a1+1):len(antennas) {
            if antennas[a1][0] == antennas[a2][0] {
                var diffi = antennas[a1][1] - antennas[a2][1];
                var diffj = antennas[a1][2] - antennas[a2][2];
                var a_n1 = [antennas[a1][1] + diffi, antennas[a1][2] + diffj];
                var a_n2 = [antennas[a1][1] - (2 * diffi), antennas[a1][2] - (2 * diffj)];
                res += [a_n1];
                res += [a_n2];
            }
        }
    }
    return res;
}

fun find_anti_nodes_p2(antennas) {
    var res = [];
    for a1 in 0:(len(antennas) - 1) {
        for a2 in (a1+1):len(antennas) {
            if antennas[a1][0] == antennas[a2][0] {
                var diffi = antennas[a1][1] - antennas[a2][1];
                var diffj = antennas[a1][2] - antennas[a2][2];
                var a_n1 = [antennas[a1][1], antennas[a1][2]];
                while a_n1[0] >= 0 and a_n1[1] >= 0 {
                    res += [a_n1];
                    a_n1 = [a_n1[0]+diffi, a_n1[1]+diffj];
                }

                var a_n2 = [antennas[a1][1], antennas[a1][2]];
                while a_n2[0] < 50 and a_n2[1] < 50 {
                    res += [a_n2];
                    a_n2 = [a_n2[0]-diffi, a_n2[1]-diffj];
                }
            }
        }
    }
    return res;
}





var input = read_file("day08/in") ->
    lines;

input->
    find_antennas->
    find_anti_nodes->
    filter_oob(len(input), len(input[0]))->
    remove_dupes->
    len->
    fun(ans) print("p1: " + ans);

input->
    find_antennas->
    find_anti_nodes_p2->
    filter_oob(len(input), len(input[0]))->
    remove_dupes->
    len->
    fun(ans) print("p2: " + ans);

